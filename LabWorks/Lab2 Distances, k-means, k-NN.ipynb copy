{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Ol2tVNfUrAMb"
   },
   "source": [
    "# MSE MachLe -- Similarities, k-NN, k-means\n",
    "**Helmut Grabner, Autum Term, 2020**\n",
    "\n",
    "### Objectives:\n",
    "+ calculate different distances in Python\n",
    "+ perform k-means clustering\n",
    "+ perform k-NN classification\n",
    "+ cross-valitation\n",
    "\n",
    "### Questions:\n",
    "+ What is meant by \"curse of dimensionality\"\n",
    "+ How to set k in k-means?\n",
    "+ How to set k in k-NN?\n",
    "+ k-NN: what happens if you set k=1, or k=n?\n",
    "+ Pros and Cons of the approaches\n",
    "\n",
    "### Hints:\n",
    "+ curse of dimensionolity: https://en.wikipedia.org/wiki/Curse_of_dimensionality\n",
    "+ k-means clustering: https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html\n",
    "+ k-NN classifier: https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html#sklearn.neighbors.KNeighborsClassifier\n",
    "+ Cross Validation: https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_val_score.html#sklearn.model_selection.cross_val_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "VlrFkfd_rAMd"
   },
   "source": [
    "# (1) Distances - Curse of dimensionality\n",
    "Draw two random points in n-dimensions and calulate their distance using Euclidian Norm and repeat 1000 times. Normalize by the maximim possible values. For 2 dimensions the maximum distance ist $\\sqrt{2}$, how does it generalize to higher dimensions?\n",
    "\n",
    "What do you obsereve? Interpret results!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 366
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 1571,
     "status": "ok",
     "timestamp": 1600844949756,
     "user": {
      "displayName": "Helmut Grabner",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Gh7VFoSO9VR3VvyyTFY2VEA3A1vWKRswaJHGQ3HoA=s64",
      "userId": "06526771998566964714"
     },
     "user_tz": -120
    },
    "id": "3iCSdKvxFpa1",
    "outputId": "5b106fd9-d7c3-4c9a-b668-49b27a465302"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distance for 2 dimensons : 0.37 , with variance:  0.0317\n",
      "Distance for 3 dimensons : 0.387 , with variance:  0.0209\n",
      "Distance for 10 dimensons : 0.402 , with variance:  0.006\n",
      "Distance for 100 dimensons : 0.408 , with variance:  0.0006\n",
      "Distance for 1000 dimensons : 0.408 , with variance:  0.0001\n",
      "Distance for 10000 dimensons : 0.408 , with variance:  0.0\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import scipy.spatial.distance as dist\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "c=['r', 'b', 'g', 'm', 'c', 'y']\n",
    "\n",
    "cnt=-1\n",
    "for dim in [2, 3, 10, 100, 1000, 10000]:\n",
    "  cnt = cnt +1\n",
    "  myDists=[]\n",
    "  for i in range(1000):\n",
    "      #draw two random points\n",
    "      x = np.random.uniform(0, 1, dim)\n",
    "      y = np.random.uniform(0, 1, dim)\n",
    "\n",
    "      ### START YOUR CODE HERE ###\n",
    "\n",
    "      #normalize = ...\n",
    "      normalize = np.sqrt(dim)\n",
    "      \n",
    "      ### END YOUR CODE HERE ###\n",
    "      \n",
    "      curDist = dist.euclidean(x, y)/normalize\n",
    "      myDists.append( curDist )\n",
    "  print ('Distance for', dim, 'dimensons :' , \n",
    "         round(np.mean(myDists),3), ', with variance: ',round(np.var(myDists),4))\n",
    "  plt.hist(myDists, color=c[cnt])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "o2_HuiQw_pQ6"
   },
   "source": [
    "Same experiment as above, but use a differn distance funtion, e.g., $L_1$ or $L_\\infty$. What changes?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 366
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 1613,
     "status": "ok",
     "timestamp": 1600844961300,
     "user": {
      "displayName": "Helmut Grabner",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Gh7VFoSO9VR3VvyyTFY2VEA3A1vWKRswaJHGQ3HoA=s64",
      "userId": "06526771998566964714"
     },
     "user_tz": -120
    },
    "id": "9exLYvisMnxw",
    "outputId": "c668edb7-fac1-46d6-a82a-406824b55034"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distance for 2 dimensons : 0.335 , with variance:  0.0272\n",
      "Distance for 3 dimensons : 0.332 , with variance:  0.0186\n",
      "Distance for 10 dimensons : 0.334 , with variance:  0.0056\n",
      "Distance for 100 dimensons : 0.333 , with variance:  0.0006\n",
      "Distance for 1000 dimensons : 0.333 , with variance:  0.0001\n",
      "Distance for 10000 dimensons : 0.333 , with variance:  0.0\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cnt=-1\n",
    "for dim in [2, 3, 10, 100, 1000, 10000]:\n",
    "  cnt = cnt +1\n",
    "  myDists=[]\n",
    "  for i in range(1000):\n",
    "      \n",
    "      ### START YOUR CODE HERE ###\n",
    "\n",
    "      x = np.random.uniform(0, 1, dim)\n",
    "      y = np.random.uniform(0, 1, dim)\n",
    "      curDist = dist.cityblock(x, y) \n",
    "      myDists.append( curDist / (dim) )\n",
    "      \n",
    "      ### END YOUR CODE HERE ###\n",
    "\n",
    "  print ('Distance for', dim, 'dimensons :' , round(np.mean(myDists),3), ', with variance: ',round(np.var(myDists),4))\n",
    "  plt.hist(myDists, color=c[cnt])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Tnh7X1OkrAMq"
   },
   "source": [
    "### Add your interpretations & findings here:\n",
    "..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "bfQOOcC1jiH5"
   },
   "source": [
    "# (2) k-means clustering: Swiss-Parlament\n",
    "Based on 921 votes in 2019 in the National Council, a distance matrix was created between all parliamentarians.The elements in the distance matrix show how similar respectively dissimilar (distance) the parliamentarians vote. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "qEwH-eVvjiH7"
   },
   "outputs": [],
   "source": [
    "# load librarys\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "import pandas as pd\n",
    "from sklearn import (manifold, datasets, decomposition)\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import random\n",
    "from sklearn.cluster import KMeans\n",
    "%matplotlib inline\n",
    "random.seed(0)\n",
    "\n",
    "# load data\n",
    "df = pd.read_csv(\"parlament_dist.txt\", encoding=\"iso-8859-1\")\n",
    "meta = pd.read_csv(\"meta.txt\", encoding=\"iso-8859-1\")\n",
    "# data preparation\n",
    "df = df.set_index(df[\"Name\"])\n",
    "del df[\"Name\"]\n",
    "\n",
    "# pre-processing of the data\n",
    "# do a low dimensional embedding -- (forward reference to sub-space methods)\n",
    "# MDS = MultiDimensional Scaling\n",
    "mds = manifold.MDS(n_components=2).fit_transform(df)\n",
    "mds = pd.DataFrame({'V1': mds[:, 0], 'V2': mds[:, 1]})\n",
    "df_mds = pd.concat([meta, mds], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 283
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 877,
     "status": "ok",
     "timestamp": 1600843873403,
     "user": {
      "displayName": "Helmut Grabner",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Gh7VFoSO9VR3VvyyTFY2VEA3A1vWKRswaJHGQ3HoA=s64",
      "userId": "06526771998566964714"
     },
     "user_tz": -120
    },
    "id": "7D-ubGJBjiIF",
    "outputId": "3b2c2d0a-b088-4dba-fe53-5d099724063d"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Run the code below to investigate the number of k, does it match your estimate?\n",
    "\n",
    "X = mds #...your dataset containing MDS coordinates\n",
    "cost =[] \n",
    "for i in range(1, 7): \n",
    "    KM = KMeans(n_clusters = i, max_iter = 500) \n",
    "    KM.fit(X)\n",
    "    cost.append(KM.inertia_)      \n",
    "\n",
    "plt.plot(range(1, 7), cost, linewidth ='3') \n",
    "plt.xlabel(\"Value of K\") \n",
    "plt.ylabel(\"Sqaured Error (Cost)\")\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Qn9rrh0cjiII"
   },
   "source": [
    "### Add your interpretations & findings here:\n",
    "..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 50
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 588,
     "status": "ok",
     "timestamp": 1600843882770,
     "user": {
      "displayName": "Helmut Grabner",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Gh7VFoSO9VR3VvyyTFY2VEA3A1vWKRswaJHGQ3HoA=s64",
      "userId": "06526771998566964714"
     },
     "user_tz": -120
    },
    "id": "DqL5v9mBjiIJ",
    "outputId": "15272f04-6c88-4b5d-cf01-6901cbc71538"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KMeans(n_clusters=7, random_state=0)\n",
      "[[-0.73191082 -3.05020918  2.81229532 -2.0611153   0.02102885 -0.74664913\n",
      "   3.2279533 ]\n",
      " [ 1.64752591 -3.84714225  1.70016092 -1.03815284  1.66876351  1.01122361\n",
      "   1.69138594]]\n"
     ]
    }
   ],
   "source": [
    "# Perform k-means clustering with\n",
    "#   (a) the number of clusters obtained from the task above,\n",
    "#   (b) the number of parties (prior knowledge)\n",
    "# and print out the cluster centers.\n",
    "\n",
    "#### START YOUR CODE HERE ####\n",
    "\n",
    "#centers = ...\n",
    "\n",
    "#kmeans = KMeans(n_clusters=3, random_state=0).fit(mds)\n",
    "#number of parties\n",
    "kmeans = KMeans(n_clusters=7, random_state=0).fit(mds)\n",
    "centers = kmeans.cluster_centers_\n",
    "\n",
    "#### END YOUR CODE HERE ####\n",
    "\n",
    "print(kmeans)\n",
    "print(centers.T)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 513
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 962,
     "status": "ok",
     "timestamp": 1600843889876,
     "user": {
      "displayName": "Helmut Grabner",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Gh7VFoSO9VR3VvyyTFY2VEA3A1vWKRswaJHGQ3HoA=s64",
      "userId": "06526771998566964714"
     },
     "user_tz": -120
    },
    "id": "-h_hQ0N7jiIO",
    "outputId": "47085ea6-0986-4566-e8c4-3a80360aae77"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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58A6M6sxswjwDuDbAbZHREREAlIU1IOdc0Nm1gD8FxAGvuyc+01Q7REREZHgBBZIAJxz3wG+E2QbREREJHiq1CoiIiKBUyARERGRwCmQiIiISOAUSERERCRwCiQiIiISOAUSERERCZwCiYiIiAROgUREREQCp0AiIiIigVMgERERkcApkIiIiEjgFEhEREQkcAokIiIiEjgFEhEREQmcAomIiIgEToFEREREAqdAIiIiIoFTIBEREZHAKZCIiIhI4BRIREREJHAKJCIiIhI4BRIREZECZ2ZxM3si7WvNFD570MyWjjq3xMw+kPa62sz+LX8tnrqiIB8uIiIiWTnjnLs80xtmZoA55xJTuN8S4APA5wCccx3A23JuZQ7UQyIiIjLHmNkaM9trZp8DHgMuNLPPm9luM/uNmW3P8JkyM/uumW0FPgWsTfa2NCfv9+vkdaVmdpeZ/crMHjezuuT595jZA8l77DezT+fzZ1IPiYiISOErM7Mnkt+3A38KrAducs59AMDMbnfOHTezMPCQmW1wzu1JfmYB8HXgHufcPWb238CLUr0uo4aAbgFwzr3YzC4Bvmdmtcn3LgdeCgwA+8zss865Z/LxAyqQiIiIFL4RQzbJAPG0c+6nade83cxuxv9uXwVcBqQCyYPAp51zX83iWa8GPgvgnPutmT0NpALJQ865nmQbngQuAvISSDRkIyIiMjf1pr4xsxrgo8DrnXMbgP8EStOufQSoT843mcxE1wykfR8njx0bCiQiIiJz3yJ8QOkxsxVA/aj3/wroIjmJFTgFLBznXj8E3gWQHKpZDezLd4NHUyARERGZ45xzvwQeB34DfBnfIzLanwClZvZp51wX8IiZ/drMmkdd9zkgbGa/Au4D3uOcGxh9s3wz59xMPyNvNm7c6Hbv3h10M0RERGZTNsMsc556SERERCRwCiQiIiISOAUSERERCZwCiYiIiAROgUREREQCp0AiIiIigVPpeBERkXnEzG4H3omvtJoAOoEnnHMfS7vmcuBe59ylZnYQX0gtARwBbnDOHc53uxRIREREClT7rp184y/e8RBQg99Ur/mj3zv23enez8yuBN4IvMw5N2BmS4EXAncBH0u79B3A19Je1znnjpnZ3wB/Dnxoum0Yz7hDNma2yMz+1sy+YmbvHPXe58b7nIiIiOSufddOdrbcCn6jvOPJ451/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\n",
      "text/plain": [
       "<Figure size 554.625x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# visualization of MDS and cluster centers\n",
    "sns.set_palette([\"saddlebrown\", \"red\", \"orange\",\"limegreen\", \"blue\",\"green\", \"yellow\"])\n",
    "\n",
    "# Do the cluster centers make sense to you? Could the data be better explained by more or less clusters?\n",
    "\n",
    "# Plot mds embedding\n",
    "ax = sns.lmplot('V1', 'V2', data = df_mds, fit_reg = False, size = 7, hue='Fraktion')\n",
    "plt.plot(centers.T[0],centers.T[1],\"x\", color =\"black\" ,markersize=15, markeredgewidth=5)\n",
    "plt.xlabel('mds emb1')\n",
    "plt.ylabel('mds emb2')\n",
    "\n",
    "# replace Fraction labels with party labels (optional)\n",
    "new_labels = [\"SVP\",\"SP\",\"CVP\",\"Grüne\",\"FDP\",\"GL\",\"BDP\"]\n",
    "for t, l in zip(ax._legend.texts, new_labels): t.set_text(l)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "3ahINWmjjiIS"
   },
   "source": [
    "### Add your interpretations & findings here:\n",
    "..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "XPAEExA6mo-_"
   },
   "source": [
    "# (3) k-NN, Diabetes data\n",
    "\n",
    "Fit a k-NN classifier to the given dataset containing data from diabetes patients.\n",
    "Choose as k, the values 1,5 and n (number of train samples) and plot the corresponding confusion matrix. What do you observe in the extreme cases for k.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 852
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 962,
     "status": "ok",
     "timestamp": 1600843946113,
     "user": {
      "displayName": "Helmut Grabner",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Gh7VFoSO9VR3VvyyTFY2VEA3A1vWKRswaJHGQ3HoA=s64",
      "userId": "06526771998566964714"
     },
     "user_tz": -120
    },
    "id": "Q1tUDohLz_Jn",
    "outputId": "e75b9ac1-d101-46fa-c4d8-f4043f678e5c"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXwAAAEWCAYAAABliCz2AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAUP0lEQVR4nO3deZRcZZ3G8e8v6WxkGQIJIQZCgEAUWWVRFgEVEZSMAy4objBIBGRAccaFYVTQmdFxdEAHlQiKyhiOrCMgoowQ2WQVlEU2ISTsWYAEsnb/5o+6HZvYna7EqlSn3+/nnDpd975Vt5706Tz91lu3qiMzkST1fwNaHUCStG5Y+JJUCAtfkgph4UtSISx8SSqEhS9JhbDw1W9ExLiI+E1ELIyIrzfgeEdGxA2NyCb1BRa++pNpwFxgVGZ+qtVhACJifET8LCKejIiMiEl/5fEmRcS1EfFyRPwxIg5YzW2viohFXS7LIuIP1dgmETGjyvVCRNwYEa9vVm71DRa++qSoWdOfzy2A+3It3k0YEW1rep86dQC/AN7VoOPNAH4HbAz8M3BRRIzt7oaZeXBmjui8ADcBF1bDI4DbgF2BjYAfAldGxIgm5VZfkJlevKzVBfgM8ASwEHgAeEu1fyBwCvBINXYHsHk1the1onmh+rpXl+NdB/wrcCOwGJgMvBr4FTC/eoz39pDlPGA5sAxYBBwADAHOAJ6sLmcAQ6rb7w/Mqf4NTwM/7uaYRwI3dNn+GnAD8Ddr8b1qAxKY9Fd8v7cFlgIju+y7Hji2jvtOAtqBLVdzmxeBXRud20vfuTRrVqN+LiKmACcAu2fmk9VT/oHV8MnA+4G3Aw8COwIvR8RGwJXAidRmqu+hNqucnJnzqvt+CDiYWrkPB+4BPl/t2xH4ZUTcm5n3ds2TmUdGBMCczDy1yng68AZgZ2ql9b/AqcC/VHfblNrsdgtW82y3eqZxNjARODAzX46IfYArVvMtOiQz13j9PyK+Xf17ju9m+LXAnzJzYZd9d1f7e/Nh4PrMfLSHx90ZGAw8vGaJtT6x8LW22qnNoLeLiOcy87EuYx8FPp2ZD1TbdwNExIeAhzLzx9X+GRFxIjCV2gwd4LzOMo+Ig4DHMvMH1didEXEx8G7gFYXfgw8A/5CZz1bHO41acXcWfgfwhcxcuppjDKL2y6kNmJqZywCqMt+wjgxrpIei7zSC2jOjrl4AJtRx6A8DX+5uICJGAT8GTsvMVY+vfsTC11rJzIcj4hPAF4HXRsTVwMmZ+SSwObXlnFW9Cpi1yr5ZvLKwZne5vgXw+oh4vsu+NmrlVI9VH29Wta/Tc5m5pJdjTAZ2AvboLPsWWgSMWmXfKGrLZj2qno1sClzUzdgw4HLgt5n57w3KqT7KF2211jLzJ5m5D7ViTuCr1dBsYOtu7vJkdduuJlJ7HWDlYbtcnw3MzMwNu1xGZOZxdUZc9fEmVvu6e6ye3A8cBVxVLWMBEBFvXOUMmFUvb6wz45q4F9gqIkZ22bcTvT/b+QhwSWYu6rozIoYAl1H7/n+skUHVN1n4WisRMSUi3lyVxhJqL7K2V8PnAF+KiG2qs212jIiNgZ8D20bEERHRFhGHA9vR81r4FdXtPxQRg6rL7hHxmjpjzgBOjYixETGG2msB56/pvzUzZ1B7EfqaiNi62nd9djkDppvL9Z33j4ih1Ja/AIZU22ssMx8E7gK+EBFDI+JQaq9rXNzTfaoZ/Hv485JZ5/5B1Gb8i4EPZ2ZHN/dtSG71HS7paG0NAb4CvIba2TE3UTsPHuAb1fgvgTHAH4FDM3NORBwCnAl8h9oLhIdk5tzuHiAzF0bEgdXxvkFtgnI3tReF6/Flaksev6+2L6SHdezeZOYPI2Iw8OuI2G+V1yx6s7jL9T9WX6O7G0bEd6vHO7aHY72PWnkvAB4H3p2Zz1X3fSNwVdZOwez0d9TW+a9d5Th7AYdU2Z6vXvAGOLjLL6u6c2v9EJn+ARRJKoFLOpJUCAtfkgph4UtSISx8SSpEXz5Lx1eTJWnN9XgmVV8ufPaZOrPVEaS/cMPl+wFw5aApvdxSWrfesfyB1Y67pCNJhbDwJakQFr4kFcLCl6RCWPiSVAgLX5IKYeFLUiEsfEkqhIUvSYWw8CWpEBa+JBXCwpekQlj4klQIC1+SCmHhS1IhLHxJKoSFL0mFsPAlqRAWviQVwsKXpEJY+JJUCAtfkgph4UtSISx8SSqEhS9JhbDwJakQFr4kFcLCl6RCWPiSVAgLX5IKYeFLUiEsfEkqhIUvSYWw8CWpEBa+JBXCwpekQlj4klQIC1+SCmHhS1IhLHxJKoSFL0mFsPAlqRAWviQVwsKXpEJY+JJUCAtfkgph4UtSISx8SSqEhS9JhWhrdQA11uYThnH6p7dbuf2qTYdyzv88xsjhbUx923ief2E5AGf/6FF+e8f8VsVUoXb83r+xydv3Z9mz8/jNLlMBGLnjFHY46zQGjtiAxY89wV0f/kdWLHypxUn7p8jMVmfoSe4zdWarM6zXBgyAS8/bk2mfupN3HLApi5e0M+PSOa2Otd674fL9ALhy0JQWJ1n/bLTPbqx46WV2/v5XVxb+3jdfxP2f/irzr7+NzY58FxtM2owHv3hmi5Oun96x/AGA6Gm8aUs6EfHqiPhMRHwzIs6srr+mWY+nv7TrTqN54qnFPPPc0lZHkQCYf8PtLJ//wiv2Dd92S+ZffxsAc6+5kU0PPbAV0YrQlMKPiM8AF1D7TXMrcFt1fUZEfLYZj6m/dMAbx3LNb55duX3YOyZw3jd35XMnbsvI4a7mqW9YdO+DjJv6FgDGv/sghm0+vsWJ+q9mzfCPBnbPzK9k5vnV5SvAHtVYtyJiWkTcHhG3T58+vUnRytDWFuz9+jFce+NzAFx61ZMcPu0WjjrpDuYtWMYJR2/V4oRSzd3H/DNbHHcE+9xyMW0jhtOxbFmrI/VbzZrmdQCvAmatsn98NdatzJwOdDZ9/uhy1/DX1ht23YgHH1nIgudrL9J2fgX42dVP8R+f36FV0aRXeOmBP3Hr22vzwOHbTGKTt+/f2kD9WLMK/xPA/0XEQ8Dsat9EYDJwQpMeU10csO8mXDPzz8s5G48ezLwFtZnTvnuO4U+zPAtCfcPgsRux7Ln5EMHkU45j1vQLWh2p32pK4WfmLyJiW2pLOBOord/PAW7LzPZmPKb+bMiQAey+82i+dtaDK/cdd9RWbLPlcDLh6WeX8LWzHmphQpVq5x9/nY3324PBY0bz5kdn8tDp32LgiA3Y4tgjAHj6sl8x57yLW5yy//K0TGkNeVqm+qqWnZYpSepbLHxJKoSFL0mFsPAlqRAWviQVwsKXpEJY+JJUCAtfkgph4UtSISx8SSqEhS9JhbDwJakQFr4kFcLCl6RCWPiSVAgLX5IKYeFLUiEsfEkqhIUvSYWw8CWpEBa+JBXCwpekQlj4klQIC1+SCmHhS1IhLHxJKoSFL0mFsPAlqRBtqxuMiI1WN56Z8xsbR5LULKstfOAOIIEAJgILqusbAo8DWzY1nSSpYVa7pJOZW2bmVsDVwNTMHJOZGwOHAJesi4CSpMaodw1/98z8eedGZl4F7NecSJKkZuhtSafT3Ig4FTif2hLPB4F5TUslSWq4emf47wfGApdWl7HVPknSeqKuGX51Ns5JETEiMxc1OZMkqQnqmuFHxF4RcR9wX7W9U0R8u6nJJEkNVe+Szn8Bb6Nat8/Mu4F9mxVKktR4db/TNjNnr7KrvcFZJElNVO9ZOrMjYi8gI2IwcCJwf/NiSZIard4Z/rHAx4EJwBxgZ+D4ZoWSJDVevTP8KZn5ga47ImJv4MbGR5IkNUO9M/xv1blPktRH9fZpmXsCewFjI+LkLkOjgIHNDCZJaqzelnQGAyOq243ssv9F4N3NCiVJarzVFn5mzgRmRsR5mTlrHWWSJDVBvWv450TEhp0bETE6Iq5uUiZJUhPUW/hjMvP5zo3MXABs0pxIkqRmqLfwOyJiYudGRGxB7WOSJUnricjsvbcj4iBgOjCz2rUvMC0zm7ms4y8USVpz0eNAPYUPEBFjgDdUB7s5M+c2JluPLHxJWnNrV/gR8erM/GNEvK678cy8swHhepJ/OORNTTy8tHZ2uOJaAJZccmaLk0ivNPSwk2A1hd/befifAo4Bvt7NWAJvXutkkqR1qrfz8I+pvjrVlqT1XG8frXDY6sYz85LGxpEkNUtvSzpTq6+bUPtMnV9X228CrgMsfElaT/S2pHMUQERcAWyXmU9V2+OBs5ofT5LUKPW+8WpSZ9lXngG2bUIeSVKT1PsHUK6rPjtnBrWzc94HXNu0VJKkhqur8DPzhIg4lNo7bAGmZ+alzYslSWq0emf4AHcCCzPzmojYICJGZubCZgWTJDVWXWv4EXEMcBFwdrVrAnBZs0JJkhqv3hdtPw7sTe0vXZGZD+HHI0vSeqXewl+amcs6NyKiDT/cTJLWK/UW/syIOAUYFhFvBS4ELm9eLElSo9Vb+J8BngP+AHwM+DlwarNCSZIar9ezdCJiAPD7zNwe+F7zI0mSmqHXGX5mdgB3d/0Th5Kk9U+95+GPB+6NiFuBlzp3ZubfNiWVJKnh6i3805qaQpLUdL19Hv5Q4FhgMrUXbM/NzBXrIpgkqbF6W8P/IbAbtbI/mO7/1KEkaT3Q25LOdpm5A0BEnAvc2vxIkqRm6G2Gv7zziks5krR+622Gv1NEvFhdD2rvtH2xup6ZOaqp6SRJDdPbnzgcuK6CSJKaq96PVpAkrecsfEkqhIUvSYWw8CWpEBa+JBXCwpekQlj4klQIC1+SCmHhS1IhLHxJKoSFL0mFsPAlqRAWviQVwsKXpEJY+JJUCAtfkgph4UtSISx8SSqEhS9JhbDwJakQFr4kFcLCl6RCWPiSVAgLX5IK0dbqAGqsQWPGstnJn6Nt9EbQkcy/+grm/ezileNjDn0v448+jvuOeCftL77YwqQq0dLlKzhq+mUsX9HOio4O3rr91hz/1j0A+MlNv+eCm+9h4IBg31dvwScP3qvFafsfC7+fyfZ2njr3Oyx55CEGDBvG5DPOZtHvbmfp7FkMGjOWEbvsxrJnn251TBVqcNtAzvnoO9lgyCCWt7dz5HcvZZ8pE1myvJ3r7nuMi046nMFtA5m36OVWR+2XXNLpZ1YsmM+SRx4CoGPxYpbOfpxBG48BYPwxH+fpH5wN2cqEKllEsMGQQQCsaO9gRUcHEFx4yz38/f67MLhtIAAbj9ighSn7L2f4/digTcYxdKvJvPzA/YzcYy+Wz5vLkkcfaXUsFa69o4P3//eFPD7vBQ5/ww7sOHEcs+Y+z52PPsW3rr6FIYPaOPngPdl+83GtjtrvrPMZfkQctZqxaRFxe0TcPn369HUZq98ZMHQoW5xyOk997yyyo51NDv8gz5z/g1bHkhg4YAA/PfFwfvnZj3DPnGd46Ol5rOhIXly8lPOPfxefPHhP/mnGL8n0qWijtWJJ57SeBjJzembulpm7TZs2bV1m6l8GDmTiKafz/HXX8OLN1zN401cxeNymbPOtc5hy7gwGjRnL5DOm07bh6FYnVcFGDRvC7ltO4KYHH2fcqOG8ZfutiAh22HwcAyJY8NKSVkfsd5qypBMRv+9pCPB5WpNtdtKnWTp7FnMvuxCApbMe5f4PHrZyfMq5M3j4kx/zLB2tc/MXLaZt4ABGDRvCkuUr+O0jczhq310YNmQQtz7yBLtvNYHHnnue5e3tjB4+tNVx+51mreGPA94GLFhlfwA3NekxBWyw3faMfvOBLH70ESZ/83sAPPOjc1h4+y0tTibB3IUvceqFv6YjO+hIOHCHrdnvNZNYvqKdz1/8aw474wIGDRzAl97zFiKi1XH7nWjGOllEnAv8IDNv6GbsJ5l5RB2HyT8c8qaGZ5P+WjtccS0ASy45s8VJpFcaethJUJtYd6spM/zMPHo1Y/WUvSSpwTwPX5IKYeFLUiEsfEkqhIUvSYWw8CWpEBa+JBXCwpekQlj4klQIC1+SCmHhS1IhLHxJKoSFL0mFsPAlqRAWviQVwsKXpEJY+JJUCAtfkgph4UtSISx8SSqEhS9JhbDwJakQFr4kFcLCl6RCWPiSVAgLX5IKYeFLUiEsfEkqhIUvSYWw8CWpEBa+JBXCwpekQlj4klQIC1+SCmHhS1IhLHxJKoSFL0mFsPAlqRAWviQVwsKXpEJY+JJUCAtfkgph4UtSISx8SSqEhS9JhbDwJakQFr4kFcLCl6RCWPiSVIjIzFZn6EmfDSZJfVj0NNC2LlOsoR5Da81FxLTMnN7qHNKq/Nlcd1zSKce0VgeQeuDP5jpi4UtSISx8SSqEhV8O10jVV/mzuY705bN0JEkN5Axfkgph4UtSISz8fi4iDoqIByLi4Yj4bKvzSJ0i4vsR8WxE3NPqLKWw8PuxiBgInAUcDGwHvD8itmttKmml84CDWh2iJBZ+/7YH8HBm/ikzlwEXAO9scSYJgMz8DTC/1TlKYuH3bxOA2V2251T7JBXIwu/fuvs8Is/DlQpl4fdvc4DNu2xvBjzZoiySWszC799uA7aJiC0jYjDwPuBnLc4kqUUs/H4sM1cAJwBXA/cDP83Me1ubSqqJiBnAzcCUiJgTEUe3OlN/50crSFIhnOFLUiEsfEkqhIUvSYWw8CWpEBa+JBXCwlfxImLjiLirujwdEU902R7cy303jIjju2zvHxFXND+1tObaWh1AarXMnAfsDBARXwQWZeZ/do5HRFv1nobubAgcD3y72Tmlv5aFL3UjIs6j9kmOuwB3RsRCuvwiqD7D/RDgK8DWEXEX8CvgSmBERFwEbA/cAXwwfcOL+gALX+rZtsABmdlezfy781lg+8zsfIawP7VfEq+l9rlFNwJ7Azc0Pa3UC9fwpZ5dmJnta3G/WzNzTmZ2AHcBkxobS1o7Fr7Us5e6XF/BK/+/DF3N/ZZ2ud6Oz6TVR1j4Un0eA14HEBGvA7as9i8ERrYok7RGLHypPhcDG1Uvzh4HPAgrz/C5MSLuiYivtTKg1Bs/LVOSCuEMX5IKYeFLUiEsfEkqhIUvSYWw8CWpEBa+JBXCwpekQvw/Rf3d1Ha71CIAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix, f1_score\n",
    "import numpy as np\n",
    "np.random.seed(1)\n",
    "%matplotlib inline\n",
    "\n",
    "# get data\n",
    "df = pd.read_csv('diabetes.csv')\n",
    "X = df.drop(columns=['Diabetes'])\n",
    "y = df['Diabetes'].values\n",
    "\n",
    "#split dataset into train and test data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n",
    "\n",
    "# Perform a k-NN on the given dataset and plot the confusion matrix\n",
    "\n",
    "n = X_train.shape[0]\n",
    "for i in [1,5,n]:\n",
    "    \n",
    "    knn = KNeighborsClassifier(n_neighbors = i)\n",
    "    knn.fit(X_train,y_train)\n",
    "    \n",
    "    # predict test data\n",
    "    pred = knn.predict(X_test)\n",
    "    # Returns the mean accuracy on the given test data and labels\n",
    "    score = knn.score(X_test, y_test)\n",
    "    # get the confusion matrix\n",
    "    conf = confusion_matrix(pred, y_test)\n",
    "    # plot\n",
    "    sns.heatmap(conf, annot=True, fmt='d', cbar=False, cmap=\"coolwarm_r\",  linewidth = 1)\n",
    "    plt.title('score for k={} : {}'.format(i,round(score,3)))\n",
    "    plt.xlabel('Truth')\n",
    "    plt.ylabel('Predicted')\n",
    "    plt.show()\n",
    "    \n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "OCZU-_58mo_D"
   },
   "source": [
    "### Add your interpretations & findings here:\n",
    "..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "lokS7TKimo_G"
   },
   "source": [
    "## Whats the optmal k?\n",
    "\n",
    "Loop from 1 to 100 to find the best k for k-NN. Use the mean cross validation score to estimate the best k.\n",
    "\n",
    "Apply a k-NN with your estimated best k and plot the confusion matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 281
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 5225,
     "status": "ok",
     "timestamp": 1600846162826,
     "user": {
      "displayName": "Helmut Grabner",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Gh7VFoSO9VR3VvyyTFY2VEA3A1vWKRswaJHGQ3HoA=s64",
      "userId": "06526771998566964714"
     },
     "user_tz": -120
    },
    "id": "0X_3TOruz_Jw",
    "outputId": "bdd66b88-64dd-4824-f605-c8826c3ae974"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# single crossvalidation for given K\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix, f1_score\n",
    "import numpy as np\n",
    "np.random.seed(1)\n",
    "%matplotlib inline\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "# get data\n",
    "df = pd.read_csv('diabetes.csv')\n",
    "X = df.drop(columns=['Diabetes'])\n",
    "y = df['Diabetes'].values\n",
    "\n",
    "#split dataset into train and test data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n",
    "\n",
    "# Loop from 1 to 100 to find the best k for k-NN. \n",
    "# Use the mean of the cross validation scores to estimate the best k\n",
    "\n",
    "#### START YOUR CODE HERE ####\n",
    "\n",
    "#create a new KNN model\n",
    "scores = []\n",
    "for k in range(1,100):\n",
    "\n",
    "  knn_cv = KNeighborsClassifier(n_neighbors=k)\n",
    "\n",
    "  #train model with cv of 5 \n",
    "  cv_scores = cross_val_score(knn_cv, X_train, y_train, cv=5)\n",
    "  \n",
    "  #print each cv score (accuracy) and average them\n",
    "  scores.append(np.mean(cv_scores))\n",
    "\n",
    "best_k = np.argmax(scores)+1\n",
    "best_score = scores[best_k]\n",
    "\n",
    "plt.plot(scores)\n",
    "plt.title(\"best k at {} with score of {}\".format(best_k, round(best_score,3)))\n",
    "plt.axvline(x=best_k, c=\"k\",  ls=\"--\")\n",
    "plt.show()\n",
    "\n",
    "#### END YOUR CODE HERE ####\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "B7j4-BCNmo_M"
   },
   "source": [
    "### Add your interpretations and findings here:\n",
    "..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 295
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 611,
     "status": "ok",
     "timestamp": 1600700004082,
     "user": {
      "displayName": "Helmut Grabner",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14Gh7VFoSO9VR3VvyyTFY2VEA3A1vWKRswaJHGQ3HoA=s64",
      "userId": "06526771998566964714"
     },
     "user_tz": -120
    },
    "id": "CwfJvaABz_J0",
    "outputId": "5b4b69d8-a3a9-4943-d891-64a677a63c1b"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create KNN classifier for estimated best k\n",
    "\n",
    "#### START YOUR CODE HERE ####\n",
    "\n",
    "knn = KNeighborsClassifier(n_neighbors = best_k)\n",
    "# Fit the classifier to the data\n",
    "knn.fit(X_train,y_train)\n",
    "# predict test data\n",
    "pred = knn.predict(X_test)\n",
    "# Returns the mean accuracy on the given test data and labels\n",
    "score = knn.score(X_test, y_test)\n",
    "# get the confusion matrix\n",
    "conf = confusion_matrix(pred, y_test)\n",
    "# plot\n",
    "sns.heatmap(conf, annot=True, fmt='d', cbar=False, cmap=\"coolwarm_r\",  linewidth = 1)\n",
    "plt.title('score for k={} : {}'.format(best_k, round(score,3)))\n",
    "plt.xlabel('Truth')\n",
    "plt.ylabel('Predicted')\n",
    "plt.show()\n",
    "\n",
    "#### END YOUR CODE HERE ####\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "authorship_tag": "ABX9TyMiOXZ17uUktl31RCsv0vAI",
   "collapsed_sections": [],
   "name": "P02 Distances, k-means, k-NN (Solution).ipynb",
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
